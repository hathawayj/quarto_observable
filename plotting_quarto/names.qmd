---
title: "Test Plots"
format: 
  html:
    code-overflow: wrap
    page-layout: full
    self-contained: true

jupyter: python3
---


```{python}
# libraries
import altair as alt
import pandas as pd

# data import
dat = pd.read_csv("https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv")

# set altair defaults
alt.data_transformers.disable_max_rows()
#alt.renderers.enable('mimetype')
john = dat.query("name == 'John'").filter(['year', 'UT'], axis = 1)
ojs_define(data = john)
```


```{python}
alt.Chart(john)\
    .encode(
        alt.Y("UT"),
        alt.X("year", axis = alt.Axis(format = "d")))\
    .mark_line()
```

```{ojs}
transpose(data)
```


```{ojs}
//| echo: true
linechart = Plot.plot({
  y: {
    grid: true
  },
  x: {
    tickFormat: d3.format(".0f")
  },
  width: 900,
  marks: [
    Plot.line(transpose(data), {x: "year", y: "UT"})
  ]
})
```



```{ojs}
//| label: fig-penguin-body-mass
//| fig-cap: "Penguin body mass by sex and species"
dotplot2 = Plot.plot({
  x: {label: "Names of John in Utah"},
  width: 900,
  marks: [
    Plot.rectY(transpose(data), Plot.binX({y: "count"}, {x: "UT"}))
  ]})

```



```{ojs}
d3Fetch = require('d3-fetch')

response = fetch("https://raw.githubusercontent.com/byuidatascience/data4births/master/data-raw/basketball_births/basketball_births.json")

dat2 = response.json()

dat3 = d3Fetch.json("https://raw.githubusercontent.com/byuidatascience/data4births/master/data-raw/basketball_births/basketball_births.json")


dotplot = Plot.rectY(dat2, Plot.binX({y: "count"}, {x: "yrs"})).plot()
```


```{ojs}
dat2
```
